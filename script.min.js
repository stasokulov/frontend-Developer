"use strict";var username="stasokulov",linkToMyGit="https://api.github.com/users/".concat(username),numRepos="",perPage=10,page=1;function getRepos(e){var t=document.querySelector(".preloader__wrap_git");t.classList.remove("invis");var r="".concat(linkToMyGit,"/repos?per_page=").concat(perPage,"&page=").concat(e);fetch(r).then(function(e){if(200==e.status)return e.json();alert("Запрос на github.com не удался. Ошибка: "+e.status)}).then(function(e){e.forEach(function(e){gitItemCreator(e)})}).then(function(){t.classList.add("invis")})}function gitItemCreator(e){var t=document.querySelector(".git__template"),r=t.cloneNode(!0);r.classList.remove("git__template"),r.classList.remove("invis"),r.classList.add("git__main__item");var n=r.querySelector(".git__item-innerWrap"),a=r.querySelector(".git__item-title"),o=r.querySelector(".marker"),i=r.querySelector(".text-element_progLang"),c=r.querySelector(".text-element_star").parentNode,s=r.querySelector(".text-element_fork").parentNode,u=r.querySelector(".text-element_update");switch(n.href=e.html_url,a.innerHTML=e.name,i.innerHTML=e.language,e.language){case"HTML":o.classList.add("marker_HTML");break;case"CSS":o.classList.add("marker_CSS");break;case"JS":o.classList.add("marker_JS")}e.stargazers_count?c.appendChild(document.createTextNode(e.stargazers_count)):c.remove(),e.forks_count?s.appendChild(document.createTextNode(e.forks_count)):s.remove(),u.innerHTML="Обновлено "+new Date(e.updated_at).toLocaleDateString("ru")+"г.",t.parentNode.appendChild(r)}function createPagination(e){var t=document.querySelector(".paginator"),r=document.querySelector(".paginator__item").cloneNode(!0);r.classList.remove("invis"),1===e&&r.classList.add("paginator__item_active"),r.appendChild(document.createTextNode(e)),t.appendChild(r)}function goPagination(){document.querySelector(".paginator").addEventListener("click",function(e){if("paginator__item"===e.target.className){var t=document.querySelectorAll(".git__main__item");(t=Array.from(t)).forEach(function(e){e.remove()}),getRepos(e.target.innerText);var r=document.querySelectorAll(".paginator__item");(r=Array.from(r)).forEach(function(e){e.classList.remove("paginator__item_active")}),e.target.classList.add("paginator__item_active")}})}getRepos(page),goPagination(),fetch(linkToMyGit).then(function(e){if(200==e.status)return e.json();alert("Запрос на github.com не удался. Ошибка: "+e.status)}).then(function(e){return numRepos=e.public_repos}).then(function(e){for(var t=Math.ceil(e/perPage),r=1;r<=t;r++)createPagination(r)});var burger=document.querySelector(".burger"),burgerItem1=document.querySelector(".burger__item-1"),burgerItem2=document.querySelector(".burger__item-2"),mobileMenu=document.querySelector(".header__mobileMenu"),language=document.querySelector(".header__mainMenu__language");burger.addEventListener("click",function(){burgerItem1.classList.toggle("burger__item-1_active"),burgerItem2.classList.toggle("burger__item-2_active"),mobileMenu.classList.toggle("invis")});var header=document.querySelector("body");header.addEventListener("click",function(e){if(e.target.classList.contains("scroll")){var t=e.target.dataset.target,r=document.querySelector("."+t).offsetTop,n=window.pageYOffset,a=50,o=(r-n)/a,i=n,c=0;!function e(){i+=o,setTimeout(function(){window.scrollTo(0,i),++c<a&&e()},10)}()}}),document.querySelector("body").addEventListener("click",function(e){if(e.target.classList.contains("telNum")){var t=e.target.innerText,r=document.createElement("input");r.value=t,document.body.appendChild(r),r.select(),document.execCommand("copy"),document.body.removeChild(r)}}),window.onload=function(){document.querySelector(".preloader__wrap_global").classList.add("invis")};var viewAll=document.querySelectorAll(".recentWorks__title-side"),hiddenWorks=document.querySelector(".recentWorks__example").querySelectorAll(".invis");(viewAll=Array.from(viewAll)).forEach(function(e){e.addEventListener("click",function(){hiddenWorks.forEach(function(e){e.classList.toggle("invis")}),viewAll.forEach(function(e){e.classList.toggle("invis")})})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
